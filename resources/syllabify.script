#################################################################################
# Blackfoot FST Syllabification
#################################################################################
#
# This foma script defines the FST `syllabify` which takes a Blackfoot word in
# the orthography of Frantz (1995, 1991) as input and returns that word with "."
# characters inserted indicating syllable boundaries.  The syllabification
# algorithm is an attempt at capturing the generalizations of Denzer-King (2009).
# The end of this script contains 68 test definitions which consist of
# transcriptions and corresponding syllabic parses taken from Denzer-King (2009)
# -- the `syllabify` FST correctly generates all such parses from the input
# transcriptions.

# See Hulden (2006) for a nice example of how to write an FST that syllabifies
# English.  The techniques employed in writing this script were taken directly
# from that paper.  The page at https://code.google.com/p/foma/wiki/RegularExpressionReference
# explains the notation used in this script.
#
# The subsection below lists eight transcriptions from Denzer-King (2009) where
# the parses therein differ from those generated by this FST.
#
# Syllabifications from Denzer-King (2009) that this FST will not generate.
#################################################################################
#
##test páyoistsi
# Denzer-King (2009):                   pá.yo.is.tsi
# this FST:                             pá.yois.tsi
#
##test ómahksíkskoistsi
# Denzer-King (2009):                   ó.mah.ksíks.ko.is.tsi
# this FST:                             ó.mah.ksíks.kois.tsi
#
##test sksksinni
# Denzer-King (2009):                   sksksin.ni
# this FST:                             sks.ksin.ni (cf. footnote 19, p. 53
#                                           of Denzer-King 2009)

##test aakííkoan
# Denzer-King (2009):                   aa.kíí.koan
# this FST:                             aa.kíí.ko.an, given parses like
#                                           ni.tsíís.tsai'.no.a.wa above
#
##test iikómsspika'pssiwa
# Denzer-King (2009):                   ii.kóm.ss.pi.ka'.pss.iwa
# this FST:                             ii.kóm.ss.pi.ka'.ps.si.wa

##test awóí'sstaakssin
# Denzer-King (2009):                   a.wóí'.ss.taa.ks.sin ((9f), p. 18)
# this FST:                             a.wóí'.ss.taaks.sin, given parses like
#                                           o.tss.táks.siis.tsi  (cf. (11e), p. 70)
#
# Note: this seems to be an inconsistency in the above.  Why is [ks] a syllable
# in the former but not in the latter?  Is there a principled reason for this?
# Ask RDK ? ...
#
##test kipahtaní'ssini 
# Denzer-King (2009):                   ki.pah.ta.ní'.s.si.ni
# this FST:                             ki.pah.ta.ní.'s.si.ni

##test nítsskskaaki                     ní.tssks.kaa.ki
# this FST:                             ní.tss.ks.kaa.ki
#
#
# Sonority scale in Bf, cf. Denzer-King (2009)
################################################################################

# Vow         vowels | glides ;
# Glo         [ "'" ] ;
# Nas         [ m | n ] ;
# Fri         [ s | h ] ;
# Sto         [ p | t | k | t s | k s ] ;


# Preliminary definitions required for the `syllabify` FST
################################################################################

define vowels       [ a | i | o | á | ó | í ] ;
define vocoids      vowels | s ;
define plosives     [ p | t | k ] ;
define stops        plosives | "'" ;
define fricatives   [ s | h ] ;
define nasals       [ m | n ] ;
define affricates   [ t s | k s ] ;
define glides       [ w | y ] ;
define consonants   stops | fricatives | nasals | affricates | glides ;

define onset        consonants - h ;
define nucleus      [ vowels (vocoids) | s ] ;
define coda         [[ fricatives | "'" ] [ plosives | nasals ] ] |
                    consonants ;

define syllable         onset nucleus (coda) ;
define syllableNoOnset  nucleus (coda) ;

# Alter syllabification so that /s/ doesn't constitute the nucleus if
# it doesn't have to.
define dispreferNucleicS [
    "." -> 0               ||
        # Word-initial /s/ is extra-syllabic, but we remove the boundary so
        # that it does not appear to be a mono-segmental syllable.
        .#. s _ ,
        # It's preferable for /s/ to be a coda than the nucleus of an
        # onset-less syllable, i.e., [.s.]:
        vowels _ s "." ,
        # /ks/ and /ts/ should be affricates in coda position over CV
        # syllables with [s] as nucleus. 
        # NOTE: this alteration is contentious and Weber (2013) does *not* assume
        # it in her metrical accent analysis ...
        vowels ([ s | "'" ]) _ affricates [ "." | .#. ] .o.
    # It's preferable for /s/ to be a coda than the onset of a
    # nucleus-as-/s/ syllable.
    "." s s "." -> s "." s || vowels _ ] ;

# Alter syllabification so that certain vowel sequences are split across two
# syllables.
define segmentVowelSequences [..] -> "." || o _ [ a | á | ó ],
                                            a _ [ á | ó ] ;

# Syllables with one of y, w, m, n or ' as onset and s as nucleus are to be
# avoided as violations of the sonority sequence (cf. above).
define sonoritySequencing [
    "." y   -> y "." ,
    "." w   -> w "." ,
    "." m   -> m ".",
    "." n   -> n ".",
    "." "'" -> "'" "."    || vowels _ s ] ;


# Syllabify FST
################################################################################
#
# The syllabify FST syllabifies Blackfoot words.  A brief explanation follows the
# definition.
#
define syllabify [
    syllable        @> ... "." || _ syllable .o.
    syllableNoOnset @> ... "." || _ syllable .o.
    dispreferNucleicS .o.
    segmentVowelSequences .o.
    sonoritySequencing
] ;

# The first regex in `syllabify` appends "." to all minimal ON(C) syllables
# followed by an ON(C) syllable.  Thus /tapikáíimii/ would be transformed to
# "ta.pi.káíimii" because "ta" is a minimal ON(C) syllable followed by another
# ON(C) syllable "pi" which is itself a minimal ON(C) syllable followed by
# another, i.e., "ká".  However, while both "ká" and "káí" are ON(C) syllables,
# neither is followed by another valid such syllable since the next segment is a
# vowel.  The second regex then transforms "ta.pi.káíimii" into [ta.pi.káíi.mii]
# (the correct parse) because it appends "." to the minimal (O)N(C) syllable "i"
# since it is followed by a minimal ON(C) syllable, viz. "mi".  Regexes #3-5 clean
# up the resulting parse in the ways described in the comments above their
# definitions.

# Save the `syllabify` FST as `phonology` so that the OLD will accept it as an OLD
# phonology.
define phonology syllabify ;


# Tests
################################################################################
#
# These are OLD-specific tests.  If compiled via an OLD application as an OLD
# phonology, one can request that the input forms be phonologized (i.e., apply
# down) via the `phonology` FST defined herein and the output(s) tested against
# the expected output defined in the test.  A test is a comment line beginning
# with "#test", followed by any amount of whitespace, followed by an input
# string, followed by any amount of whitespace, followed by "->", followed by
# any amount of whitespace, followed by an output string.
#
#test áaksikokotowa                     -> áa.ksi.ko.ko.to.wa
#test anni                              -> an.ni
#test iisápikinao'tomoyiiwa             -> ii.sá.pi.ki.nao'.to.mo.yii.wa
#test áí'tamáaksi'niwa                  -> áí'.ta.máa.ksi'.ni.wa
#test nítohtoisskimaa                   -> ní.toh.tois.ski.maa
#test nitsíítoyó'kiooka                 -> ni.tsíí.to.yó'.kioo.ka
#test nitsíístsai'noawa                 -> ni.tsíís.tsai'.no.a.wa
#test stámohkanook                      -> stá.moh.ka.nook
#test kaaáhsa                           -> kaa.áh.sa
#test otáí'nssi                         -> o.táí'.ns.si
#test kiáakitssksikayaa                 -> kiáa.ki.tss.ksi.ka.yaa
#test piihksso                          -> piih.ks.so
#test tapikáíimii                       -> ta.pi.káíi.mii
#test kaahtomáán                        -> kaah.to.máán
#test mookítsis                         -> moo.kí.tsis
#test nááo                              -> nááo
#test tsa                               -> tsa
#test ksisóyi                           -> ksi.só.yi
#test sa'ái                             -> sa.'ái
#test ohpoos                            -> oh.poos
#test ponokáómitaa                      -> po.no.káó.mi.taa
#test oohkóyimaa'tsis                   -> ooh.kó.yi.maa'.tsis
#test oma                               -> o.ma 
#test ksiini                            -> ksii.ni
#test tátsiki                           -> tá.tsi.ki
#test oksisstsi                         -> o.ksis.stsi
#test amóípiisaawa                      -> a.móí.pii.saa.wa
#test nitáwaasai'ni                     -> ni.tá.waa.sai'.ni
#test skiim                             -> skiim
#test spátsiko                          -> spá.tsi.ko
#test stámitapoot                       -> stá.mi.ta.poot
#test stsíki                            -> stsí.ki
#test isspaysstoo                       -> is.spay.ss.too
#test ksisstonímmaapioyiistsi           -> ksis.sto.ním.maa.pio.yiis.tsi
#test áaksissksaana'piiwa               -> áa.ksis.sksaa.na'.pii.wa
#test ippotsipistaan                    -> ip.po.tsi.pis.taan
#test nottoksííksi                      -> not.to.ksíí.ksi
#test ikksspíísa                        -> ik.kss.píí.sa
#test itsiksínamma                      -> i.tsi.ksí.nam.ma
#test ninna                             -> nin.na
#test aapotskina                        -> aa.pots.ki.na 
#test miistsís                          -> miis.tsís
#test isspihkima                        -> is.spih.ki.ma
#test sáóhpapokai'sstoot                -> sáóh.pa.po.kai'.ss.toot
#test nitsínnisi'.yih.pin.naan          -> ni.tsín.ni.si'.yih.pin.naan
#test annííhk                           -> an.nííhk
#test ómahkínai'kskimmiksi              -> ó.mah.kí.nai'ks.kim.mi.ksi
#test isttohkaiipisstsi                 -> ist.toh.kaii.pis.stsi
#test skai'kákanottsiiyiistskowa        -> skai'.ká.ka.not.tsii.yiists.ko.wa
#test iihtsimaawa                       -> iih.tsi.maa.wa
#test ponokáómitaayi                    -> po.no.káó.mi.taa.yi
#test awáísstaam                        -> a.wáís.staam
#test áókiniimo                         -> áó.ki.nii.mo
#test stsiki                            -> stsi.ki
#test ohpííkiists                       -> oh.píí.kiists
#test iikómsspika'pssiwa                -> ii.kóm.ss.pi.ka'.ps.si.wa
#test nitoká'psstopi                    -> ni.to.ká'.pss.to.pi
#test nitáaksstamitáóhkoonimáttsaawa    -> ni.táa.kss.ta.mi.táóh.koo.ni.mát.tsaa.wa
#test otsstákssiistsi                   -> o.tss.táks.siis.tsi
#test áyaahsssikópiwa                   -> á.yaah.ss.si.kó.pi.wa
#test iimatsiiyissiwa                   -> ii.ma.tsii.yis.si.wa
#test awóí'sstaakssin                   -> a.wóí'.ss.taaks.sin
#test ómahksskssiinaawa                 -> ó.mah.kss.ks.sii.naa.wa
#test isstsskáán                        -> is.stss.káán
#test omsstaki                          -> om.ss.ta.ki
#test noápsspi                          -> no.á.pss.pi
#test saómmitsiki'sommiksi              -> sa.óm.mi.tsi.ki'.som.mi.ksi
#test ssksikoyoot                       -> ss.ksi.ko.yoot
#
#
# The following tests are from Weber (2013):
#
#test aasai'n'i                         -> aa.sai'n.'i
#test sokottaat                         -> so.kot.taat
#
